{"version":3,"sources":["bibtex.js","index.js"],"names":["Task","EventEmitter","makeBibliographyLabel","entry","cite","Cite","format","append","id","start","files","file","parse","bibtex","text","forEach","emit","label","location","BibTeX","BasicList","constructor","nvim","addAction","item","context","cacheFullFilePaths","workspace","config","getConfiguration","length","showMessage","i","fullPath","call","push","loadItems","input","window","task","activate","subscriptions","disabled","get","isDisabled","name","indexOf","listManager","registerList","BibTeXList"],"mappings":";AAwB8C,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAxB9C,IAAA,EAAA,QAAA,YACA,EAAA,QAAA,UACA,EAAA,QAAA,MACA,EAAA,QAAA,qBAqB8C,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EApB9C,QAAA,8BAEA,MAAMA,UAAaC,EAAnB,aACEC,sBAAsBC,GAEbC,OADM,IAAIC,EAAJ,KAASF,GACVG,OAAO,eAAgB,CAACC,OAAQJ,QAAcA,EAAMK,QAE5DC,YAAMC,GACL,IAAA,IAAIC,KAAQD,EAAO,CACHL,EAAKO,KAAAA,MAAMC,OAAOC,MAAK,EAAaH,EAAAA,cAAAA,IAC1CI,QAAQZ,IACda,KAAAA,KAAK,OAAQ,CAChBC,MAAO,KAAKf,sBAAsBC,GAClCe,SAAUf,EAAMK,SAOX,MAAMW,UAAeC,EAArB,UAGbC,YAAYC,GACJA,MAAAA,GAHD,EAAA,KAAA,OAAA,UACS,EAAA,KAAA,gBAAA,UAGTC,KAAAA,UAAU,SAAU,CAACC,EAAMC,IAAY,MACvCf,KAAAA,MAAQ,GACRgB,KAAAA,qBAEDA,2BACE,MAAA,KAACJ,GAAQK,EAAf,UACMC,EAASD,EAAUE,UAAAA,iBAAiB,sBACd,IAAxBD,EAAOlB,MAAMoB,QACLC,EAAAA,UAAAA,YAAY,0EAEnB,IAAA,IAAIC,EAAI,EAAGA,EAAIJ,EAAOlB,MAAMoB,OAAQE,IAAK,CACxCC,IAAAA,QAAiBX,EAAKY,KAAK,SAAUN,EAAOlB,MAAMsB,IACjDtB,KAAAA,MAAMyB,KAAKF,IAGdG,gBAAUX,GACR,MAAA,MAACY,EAAD,OAAQC,GAAUb,EACpB,GAAsB,IAAtB,KAAKf,MAAMoB,OACN,OAAA,KAEHS,MAAAA,EAAO,IAAIvC,EAEVuC,OADPA,EAAK9B,MAAM,KAAKC,OACT6B,GA3BmC,QAAA,QAAA;;ACT7C,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,SAAA,EAfD,IAAA,EAAA,QAAA,YACA,EAAA,EAAA,QAAA,aAcC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAZM,eAAeC,EAASf,GACzB,IAAA,cAACgB,GAAiBhB,EAElBiB,EADSf,EAAUE,UAAAA,iBAAiB,SAClBc,IAAI,gBAAiB,KACvC,KAACrB,GAAQK,EAAb,UAESiB,IAAWC,EAAAA,EAGJ,UAFqB,IAA5BH,EAASI,QAAQD,IAGxBJ,EAAcN,KAAKY,EAAYC,YAAAA,aAAa,IAAIC,EAAJ,QAAe3B","file":"index.js","sourceRoot":"../src","sourcesContent":["import {BasicList, workspace, AnsiHighlight} from 'coc.nvim'\nimport {EventEmitter} from 'events'\nimport {readFileSync} from 'fs'\nimport {Cite} from '@citation-js/core'\nimport '@citation-js/plugin-bibtex'\n\nclass Task extends EventEmitter {\n  makeBibliographyLabel(entry) {\n    const cite = new Cite(entry);\n    return cite.format('bibliography', {append: entry => ` [${entry.id}]`})\n  }\n  async start(files) {\n    for (let file in files) {\n      let bibliography = Cite.parse.bibtex.text(readFileSync(file))\n      bibliography.forEach(entry => {\n        this.emit('data', {\n          label: this.makeBibliographyLabel(entry),\n          location: entry.id,\n        })\n      })\n    }\n  }\n}\n\nexport default class BibTeX extends BasicList {\n  name = 'bibtex'\n  defaultAction = 'insert'\n  constructor(nvim) {\n    super(nvim)\n    this.addAction('insert', (item, context) => null)\n    this.files = []\n    this.cacheFullFilePaths()\n  }\n  async cacheFullFilePaths() {\n    const {nvim} = workspace\n    const config = workspace.getConfiguration('list.source.bibtex')\n    if (config.files.length === 0) {\n      workspace.showMessage('No .bib files provided; set list.source.bibtex to a list of .bib files')\n    }\n    for (let i = 0; i < config.files.length; i++) {\n      let fullPath = await nvim.call('expand', config.files[i])\n      this.files.push(fullPath)\n    }\n  }\n  async loadItems(context) {\n    const {input, window} = context\n    if (this.files.length === 0) {\n      return null\n    }\n    const task = new Task()\n    task.start(this.files)\n    return task\n  }\n}\n\n","import {workspace, listManager} from 'coc.nvim'\nimport BibTeXList from './bibtex'\n\nexport async function activate(context) {\n  let {subscriptions} = context\n  let config = workspace.getConfiguration('lists')\n  let disabled = config.get('disabledLists', [])\n  let {nvim} = workspace\n\n  function isDisabled(name) {\n    return disabled.indexOf(name) !== -1\n  }\n  if (!isDisabled('bibtex')) {\n    subscriptions.push(listManager.registerList(new BibTeXList(nvim)))\n  }\n}\n"]}